/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "bluetooth_multi_LAP.h"
#include "bluetooth_packet.h"
#include <iostream>
#include <gr_block_detail.h>

/*
 * Create a new instance of bluetooth_multi_LAP and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
bluetooth_multi_LAP_sptr
bluetooth_make_multi_LAP(double sample_rate, double center_freq, int squelch_threshold)
{
  return bluetooth_multi_LAP_sptr (new bluetooth_multi_LAP(sample_rate, center_freq, squelch_threshold));
}

//private constructor
bluetooth_multi_LAP::bluetooth_multi_LAP(double sample_rate, double center_freq, int squelch_threshold)
  : bluetooth_multi_block(sample_rate, center_freq, squelch_threshold)
{
	set_symbol_history(72);
	printf("lowest channel: %d, highest channel %d\n", d_low_channel, d_high_channel);
}

//virtual destructor.
bluetooth_multi_LAP::~bluetooth_multi_LAP ()
{
}

int 
bluetooth_multi_LAP::work(int noutput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items)
{
	int retval, channel;
	char symbols[history()]; //poor estimate but safe

	for (channel = d_low_channel; channel <= d_high_channel; channel++)
	{
		int num_symbols = channel_symbols(channel, input_items, symbols, history());

		if (num_symbols >= 72 )
		{
			retval = bluetooth_packet::sniff_ac(symbols, num_symbols - 72);
			if(retval > -1) {
				bluetooth_packet_sptr packet = bluetooth_make_packet(&symbols[retval], noutput_items - retval);
				//FIXME verify that boost cleans up after the local variable expires
				printf("GOT PACKET on channel %d, LAP = %06x at time slot %d\n",
					channel, (int) packet->get_LAP(), (int) (d_cumulative_count / d_samples_per_slot));
			}
		}
	}
	d_cumulative_count += (int) d_samples_per_slot;

    /* 
	 * The runtime system wants to know how many output items we produced, assuming that this is equal
	 * to the number of input items consumed.  We tell it that we produced/consumed one time slot of
	 * input items so that our next run starts one slot later.
	 */
	return (int) d_samples_per_slot;
}
