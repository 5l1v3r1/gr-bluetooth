/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <bluetooth_dump.h>

/*
 * Create a new instance of bluetooth_dump and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
bluetooth_dump_sptr 
bluetooth_make_dump ()
{
  return bluetooth_dump_sptr (new bluetooth_dump ());
}

//private constructor
bluetooth_dump::bluetooth_dump ()
  : bluetooth_block ()
{
	d_LAP = 0;
	d_UAP = 0;
	d_payload_size = 0;
	d_packet_type = -1;
	d_stream_length = 0;
	d_consumed = 0;
	flag = 0;
	printf("Bluetooth packet dump\n\n");
}

//virtual destructor.
bluetooth_dump::~bluetooth_dump ()
{
}

int 
bluetooth_dump::work (int noutput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items)
{
	d_stream = (char *) input_items[0];
	d_consumed = 0;
	d_stream_length = noutput_items;
	int retval = 0;
	d_LAP = 0;
	d_UAP = 0;
	d_payload_size = 0;
	d_packet_type = -1;

while(d_stream_length) {
	if((noutput_items - d_consumed) > 71)
		retval = sniff_ac();
	else {
		//The flag is used to avoid being stuck with <71 input bits in file mode
		if(flag)
			d_consumed = noutput_items;
		flag = !flag;
		break;
	}

	if(-1 == retval) {
		d_consumed = noutput_items;
		break;
	}

	d_consumed += retval;

	if(126+retval <= noutput_items) {
		header();
	} else { //Drop out and wait to be run again
		break;
	}

	d_consumed += 126;
	//printf("PAYLOAD\n");
	retval = payload();
	if(0 == retval) {
		print_out();
		d_consumed += (d_payload_size*8);
	} else {//We're having payload trouble, dump the stream
		d_consumed = noutput_items;
		break;
	}

    d_LAP = 0;
    d_UAP = 0;
    d_payload_size = 0;
    d_packet_type = -1;
    d_stream_length = noutput_items - d_consumed;
}
  // Tell runtime system how many output items we produced.
  if(d_consumed >= noutput_items)
	return noutput_items;
  else
	return d_consumed;
}

/* returns the payload length */
int bluetooth_dump::payload_header(char *stream)
{
	return stream[3] | stream[4] << 1 | stream[5] << 2 | stream[6] << 3 | stream[7] << 4;
}

/* returns the payload length */
int bluetooth_dump::long_payload_header(char *stream)
{
	return stream[3] | stream[4] << 1 | stream[5] << 2 | stream[6] << 3 | stream[7] << 4 | stream[8] << 5 | stream[9] << 6 | stream[10] << 7 | stream[11] << 8;
}

/* Converts 8 bytes of grformat to a single byte */
char bluetooth_dump::gr_to_normal(char *stream)
{
	return stream[0] << 7 | stream[1] << 6 | stream[2] << 5 | stream[3] << 4 | stream[4] << 3 | stream[5] << 2 | stream[6] << 1 | stream[7];
}

/* stream points to the stream of data, length is length in bits */
char *bluetooth_dump::unfec13(char *stream, int length)
{
	int count, pointer;

	for(count = 0; count < length; count++)
	{
		pointer = 3*count;
		stream[count] = stream[pointer];
	}
	return stream;
}

/* HV1 packet */
int bluetooth_dump::HV1(char *stream)
{
	int length;
	length = 10;
	printf(" Length:%d\nUAP could not be confirmed by payload\n", length);
	stream = unfec13(stream, length*8);
	d_payload_size = length;
	return 0;
}

/* HV2 packet */
int bluetooth_dump::HV2(char *stream)
{
	int length;
	length = 20;
	printf(" Length:%d\nUAP could not be confirmed by payload\n", length);
	stream = unfec23(stream, length*8);
	d_payload_size = length;
	return 0;
}

/* HV3 packet */
int bluetooth_dump::HV3(char *stream)
{
	int length;
	length = 30;
	printf(" Length:%d\nUAP could not be confirmed by payload\n", length);
	d_payload_size = length;
	return 0;
}

/* DV packet */
int bluetooth_dump::DV(char *stream, int UAP, int size)
{
	int length, count;
	uint16_t crc, check;

	length = payload_header(stream);
	printf(" Length of data field:%d\n", length);

	/*Un-FEC 2/3 it */
	unfec23(stream+81, (length+2)*8);

	length++;
	size -= 80;
	size -= 8*(length+2);

	if(0 > size)
		return 1;

	for(count = 0; count < length+2; count++)
		stream[count+80] = gr_to_normal(stream+(8*count)+80);

	crc = crcgen(stream+80, length, UAP);

	check = stream[length+81] | stream[length+80] << 8;
	if(crc != check)
		printf("ERROR: UAPs do not match\n");
	else
		printf("UAP confirmed by CRC check\n");

	d_payload_size = length + 9;
	return 0;
}

/* EV3 packet */
int bluetooth_dump::EV3(char *stream, int UAP, int size)
{
	return 0;
}

/* EV4 packet */
int bluetooth_dump::EV4(char *stream, int UAP, int size)
{
	return 0;
}

/* EV5 packet */
int bluetooth_dump::EV5(char *stream, int UAP, int size)
{
	return 0;
}

/* DM1 packet */
int bluetooth_dump::DM1(char *stream, int UAP, int size)
{
	int length, count;
	uint16_t crc, check;	
	length = 0;

	if(8 >= size)
		return 1;

	length = payload_header(stream);

	/*Un-FEC 2/3 it */
	unfec23(stream+1, (length+2)*8);

	length++;
	size -= 8*(length+2);

	if(0 > size)
		return 1;

	for(count = 0; count < length+2; count++)
		stream[count] = gr_to_normal(stream+(8*count));

	crc = crcgen(stream, length, UAP);

	check = stream[length+1] | stream[length] << 8;
	if(crc != check)
		printf("ERROR: UAPs do not match\n");
	else
		printf("UAP confirmed by CRC check\n");

	d_payload_size = length - 1;
	return 0;
}

/* DH1 packet */
int bluetooth_dump::DH1(char *stream, int UAP, int size)
{
	int count;
	uint16_t crc, check, length;	
	length = 0;

	if(8 >= size)
		return 1;

	length = payload_header(stream);
	length++;
	size -= 8*(length+2);

	if(0 > size)
		return 1;

	for(count = 0; count < length+2; count++)
		stream[count] = gr_to_normal(stream+(8*count));

	crc = crcgen(stream, length, UAP);
	check = stream[length];
	check <<= 8;
	check |= stream[length+1];

	if(crc != check)
		printf("\nERROR: CRCs do not match 0x%04x != 0x%04x\n", crc, check);
	else
		printf("\nUAP confirmed by CRC check\n");

	d_payload_size = length - 1;
	return 0;
}

/* DM3 packet */
int bluetooth_dump::DM3(char *stream, int UAP, int size)
{
	int length, count;
	uint16_t crc, check;	
	length = 0;

	if(8 >= size)
		return 1;

	length = long_payload_header(stream);

	/*Un-FEC 2/3 it */
	unfec23(stream+1, (length+2)*8);

	length += 2;
	size -= 8*(length+2);

	if(0 > size)
		return 1;

	for(count = 0; count < length+2; count++)
		stream[count] = gr_to_normal(stream+(8*count));

	crc = crcgen(stream, length, UAP);

	check = stream[length+1] | stream[length] << 8;
	if(crc != check)
		printf("ERROR: UAPs do not match\n");
	else
		printf("UAP confirmed by CRC check\n");

	d_payload_size = length - 1;
	return 0;
}

/* DH3 packet */
int bluetooth_dump::DH3(char *stream, int UAP, int size)
{
	int length, count;
	uint16_t crc, check;	
	length = 0;

	if(8 >= size)
		return 1;

	length = long_payload_header(stream);
	length += 2;
	size -= 8*(length+2);

	if(0 > size)
		return 1;

	for(count = 0; count < length+2; count++)
		stream[count] = gr_to_normal(stream+(8*count));

	crc = crcgen(stream, length, UAP);
	check = stream[length+1] | stream[length] << 8;

	if(crc != check)
		printf("ERROR: UAPs do not match\n");
	else
		printf("UAP confirmed by CRC check\n");

	d_payload_size = length - 1;
	return 0;
}

/* AUX1 packet */
int bluetooth_dump::AUX1(char *stream, int size)
{
	int length;

	if(8 >= size)
		return 1;

	length = payload_header(stream);
	printf(" Length:%d\n", length);
	length++;

	d_payload_size = length;
	return 0;
}

/* POLL packet */
int bluetooth_dump::POLL()
{
	printf(" No payload\n");
	return 0;
}

/* FHS packet */
int bluetooth_dump::FHS(char *stream, int UAP)
{
	int length, payload_UAP, NAP;
	length = 10;
	stream = unfec23(stream, length*8);

	payload_UAP = stream[64] + stream[65] + stream[66] + stream[67] + stream[68] + stream[69] +stream[70] +stream[71];

	NAP = stream[72] + stream[73] + stream[74] + stream[75] + stream[76] + stream[77] + stream[78] + stream[79] + stream[80] + stream[81] + stream[82] + stream[83] + stream[84] + stream[85] + stream[86] + stream[87];

	if(UAP == payload_UAP)
	{
		printf("\nNAP:%04x clk:", NAP);
		printf("%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d\n", stream[115], stream[116], stream[117], stream[118], stream[119], stream[120], stream[121], stream[122], stream[123], stream[124], stream[125], stream[126], stream[127], stream[128], stream[129], stream[130], stream[131], stream[132], stream[133], stream[134], stream[135], stream[136], stream[137], stream[138], stream[139]);
	} else {
		printf("\nUAPs don't match\n");
	}
	d_payload_size = length;
	return 0;
}

/* NULL packet */
int bluetooth_dump::null_packet()
{
	printf(" No payload\n");
	d_payload_size = 0;
	return 0;
}

/* Pointer to start of header, UAP */
int bluetooth_dump::UAP_from_hec(char *packet, uint8_t hec)
{
	char byte;
	int count;

	byte = *(packet + 1);

	for(count = 0; count < 10; count++)
	{
		if(2==count)
			byte = *packet;

		/*Bit 1*/
		hec ^= ((hec & 0x01)<<1);
		/*Bit 2*/
		hec ^= ((hec & 0x01)<<2);
		/*Bit 5*/
		hec ^= ((hec & 0x01)<<5);
		/*Bit 7*/
		hec ^= ((hec & 0x01)<<7);

		hec = (hec >> 1) | (((hec & 0x01) ^ (byte & 0x01)) << 7);
		byte >>= 1;
	}
	return hec;
}

void bluetooth_dump::header()
{
	char *stream = d_stream + d_consumed + 72;
	int count, x;
	x = 0;

	/* Decode the packet header */
	for(count = 0; count < 54;)
	{
		if(count == 24)
			{x++; stream[x] = 0;}

		if(count == 30)
			{x++; stream[x] = 0;}

		int a, b, c;
		a = count++;
		b = count++;
		c = count++;

		stream[x] = (stream[x] << 1) | ((stream[a] & stream[b]) | (stream[b] & stream[c]) | (stream[c] & stream[a]));

	}

	/* Get the UAP from the HEC */
	d_UAP = UAP_from_hec(stream, stream[2]);
	d_packet_type = (stream[0] & 0x1e)>>1;

}

/* Pointer to start of packet, length of packet in bytes, UAP */
uint16_t bluetooth_dump::crcgen(char *packet, int length, int UAP)
{
	char byte;
	uint16_t reg, count, counter;

	reg = UAP & 0xff;
	for(count = 0; count < length; count++)
	{
		byte = *packet++;
		for(counter = 0; counter < 8; counter++)
		{
			reg = (reg << 1) | (((reg & 0x8000)>>15) ^ ((byte & 0x80) >> 7));
			byte <<= 1;

			/*Bit 5*/
			reg ^= ((reg & 0x0001)<<5);

			/*Bit 12*/
			reg ^= ((reg & 0x0001)<<12);
		}
	}
	return reg;
}

int bluetooth_dump::payload()
{
	char *stream = d_stream + d_consumed;
	int size;
	uint8_t type;

	type = d_packet_type;
	size = d_stream_length - d_consumed;

	switch(type) {
		case 0: return null_packet();
		case 1: return DV(stream, d_UAP, size);
		case 2: return DH1(stream, d_UAP, size);
		case 3: return EV4(stream, d_UAP, size);
		case 4: return FHS(stream, d_UAP);
		case 5: return DM3(stream, d_UAP, size);
		case 6: return HV2(stream);
		case 7: return DM3(stream, d_UAP, size);
		case 8: return POLL();
		case 9: return AUX1(stream, size);
		case 10: return HV1(stream);
		case 11: return EV5(stream, d_UAP, size);
		case 12: return DM1(stream, d_UAP, size);
		case 13: return DH3(stream, d_UAP, size);
		case 14: return HV3(stream);
		case 15: return DH3(stream, d_UAP, size);
	}
	return 1;
}

/* Looks for an AC in the stream */
int bluetooth_dump::sniff_ac()
{
	int LAP, jump, count, counter, size;
	char *stream = d_stream;
	int jumps[16] = {3,2,1,3,3,0,2,3,3,2,0,3,3,1,2,3};
	size = d_stream_length;
	count = 0;

	while(size > 72)
	{
		jump = jumps[stream[0] << 3 | stream[1] << 2 | stream[2] << 1 | stream[3]];
		if(0 == jump)
		{
			/* Found the start, now check the end... */
			counter = stream[62] << 9 | stream[63] << 8 | stream[64] << 7 | stream[65] << 6 | stream[66] << 5 | stream[67] << 4 | stream[68] << 3 | stream[69] << 2 | stream[70] << 1 | stream[71];

			if((0x0d5 == counter) || (0x32a == counter))
			{
				LAP = get_LAP(stream);
				if(check_ac(stream, LAP))
				{
					if(0x9e8b33 == LAP)
						printf("ID??\n");//aclength = 68;
					d_LAP = LAP;
					return count;
				}
			}
			if(((counter & 0xff0 >> 4 == 0x32)) || ((counter & 0xff0 >> 4 == 0x0d)))
			{
				printf("ID??\n");
				LAP = get_LAP(stream);
				if(check_ac(stream, LAP))
				{
					d_LAP = LAP;
					printf("d_LAP: %06x\n", d_LAP);
					return count;
				}
			}
			jump = 1;
		}
		count += jump;
		stream += jump;
		size -= jump;
	}
	return -1;
}
