/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <bluetooth_dump.h>

/*
 * Create a new instance of bluetooth_dump and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
bluetooth_dump_sptr 
bluetooth_make_dump ()
{
  return bluetooth_dump_sptr (new bluetooth_dump ());
}

//private constructor
bluetooth_dump::bluetooth_dump ()
  : bluetooth_block ()
{
	d_LAP = 0;
	d_UAP = 0;
	d_payload_size = 0;
	d_packet_type = -1;
	d_stream_length = 0;
	d_consumed = 0;
	printf("Bluetooth packet dump\n\n");

	/* ensure that we are always given at least 126 symbols (AC + header) */
	set_history(126); //FIXME should this be increased to include payload?  -- we have no idea how big the payload will be until after we've brute forced the whitening
}

//virtual destructor.
bluetooth_dump::~bluetooth_dump ()
{
}

int 
bluetooth_dump::work (int noutput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items)
{
	d_stream = (char *) input_items[0];
	d_stream_length = noutput_items;
	int retval;
	d_LAP = 0;
	d_UAP = 0;
	d_payload_size = 0;
	d_packet_type = -1;

	retval = sniff_ac();
	if(-1 == retval) {
		d_consumed = noutput_items;
	} else {
		d_consumed = retval;
		header();
		d_consumed += 126;
	}

	retval = payload();
	if(0 == retval) {
		print_out();
		d_consumed += (d_payload_size*8);
	}

    d_LAP = 0;
    d_UAP = 0;
    d_payload_size = 0;
    d_packet_type = -1;
	// Tell runtime system how many output items we produced.
	return d_consumed;
}

/* Converts 8 bytes of grformat to a single byte */
char bluetooth_dump::gr_to_normal(char *stream)
{
	return stream[0] << 7 | stream[1] << 6 | stream[2] << 5 | stream[3] << 4 | stream[4] << 3 | stream[5] << 2 | stream[6] << 1 | stream[7];
}

//FIXME ought to use unfec13 from parent class but not certain what is going on here
// this just repacks the bits into the first bytes in the stream, it's not the way to do it (neither is most of the rest of this file)
/* stream points to the stream of data, length is length in bits */
char *bluetooth_dump::unfec13(char *stream, int length)
{
	int count, pointer;

	for(count = 0; count < length; count++)
	{
		pointer = 3*count;
		stream[count] = stream[pointer];
	}
	return stream;
}

/* HV1 packet */
int bluetooth_dump::HV1(char *stream)
{
	int length;
	length = 10;
	printf(" Length:%d\nUAP could not be confirmed by payload\n", length);
	stream = unfec13(stream, length*8);
	d_payload_size = length;
	return 0;
}

/* HV2 packet */
int bluetooth_dump::HV2(char *stream)
{
	int length;
	length = 20;
	printf(" Length:%d\nUAP could not be confirmed by payload\n", length);
	//should unfec23
	d_payload_size = length;
	return 0;
}

/* HV3 packet */
int bluetooth_dump::HV3(char *stream)
{
	int length;
	length = 30;
	printf(" Length:%d\nUAP could not be confirmed by payload\n", length);
	d_payload_size = length;
	return 0;
}

/* DV packet */
int bluetooth_dump::DV(char *stream, int UAP, int size)
{
	int length, bitlength, count;
	uint16_t crc, check;

	/* data field starts after 80 bit voice field.
	 * data field includes payload header, payload body, and CRC */
	length = air_to_host8(&stream[83], 5);
	printf(" Length of data field payload body:%d\n", length);
	bitlength = (length+3)*8;

	/*Un-FEC 2/3 it */
	char *corrected;
	corrected = unfec23(stream+80, bitlength);

	length++;
	size -= 80;
	size -= bitlength;

	if(0 > size)
		return 1;

	for(count = 0; count < length+2; count++)
		corrected[count] = gr_to_normal(corrected+(8*count));
		//FIXME corrected now breaks air/host rules

	crc = crcgen(corrected, length, UAP);

	check = corrected[length+1] | corrected[length] << 8;
	if(crc != check)
		printf("ERROR: UAPs do not match\n");
	else
		printf("UAP confirmed by CRC check\n");

	d_payload_size = length + 9;
	return 0;
}

/* EV3 packet */
int bluetooth_dump::EV3(char *stream, int UAP, int size)
{
	return 0;
}

/* EV4 packet */
int bluetooth_dump::EV4(char *stream, int UAP, int size)
{
	return 0;
}

/* EV5 packet */
int bluetooth_dump::EV5(char *stream, int UAP, int size)
{
	return 0;
}

/* DM1 packet */
int bluetooth_dump::DM1(char *stream, int UAP, int size)
{
	int length, bitlength, count;
	uint16_t crc, check;	
	length = 0;

	if(8 >= size)
		return 1;

	length = air_to_host8(&stream[3], 5);
	bitlength = (length+3)*8;

	/*Un-FEC 2/3 it */
	char *corrected;
	corrected = unfec23(stream, bitlength);

	length++;
	size -= bitlength;

	if(0 > size)
		return 1;

	for(count = 0; count < length+2; count++)
		corrected[count] = gr_to_normal(corrected+(8*count));
		//FIXME corrected now breaks air/host rules

	crc = crcgen(corrected, length, UAP);

	check = corrected[length+1] | corrected[length] << 8;
	if(crc != check)
		printf("ERROR: UAPs do not match\n");
	else
		printf("UAP confirmed by CRC check\n");

	d_payload_size = length - 1;
	return 0;
}

/* DH1 packet */
int bluetooth_dump::DH1(char *stream, int UAP, int size)
{
	int count;
	uint16_t crc, check, length;	
	length = 0;

	if(8 >= size)
		return 1;

	length = air_to_host8(&stream[3], 5);
	length++;
	size -= 8*(length+2);

	if(0 > size)
		return 1;

	for(count = 0; count < length+2; count++)
		stream[count] = gr_to_normal(stream+(8*count));

	crc = crcgen(stream, length, UAP);
	check = stream[length];
	check <<= 8;
	check |= stream[length+1];

	if(crc != check)
		printf("\nERROR: CRCs do not match 0x%04x != 0x%04x\n", crc, check);
	else
		printf("\nUAP confirmed by CRC check\n");

	d_payload_size = length - 1;
	return 0;
}

/* DM3 packet */
int bluetooth_dump::DM3(char *stream, int UAP, int size)
{
	int length, bitlength, count;
	uint16_t crc, check;	
	char *corrected_payload_header;
	length = 0;

	if(8 >= size)
		return 1;

	corrected_payload_header = unfec23(stream, 16);
	length = air_to_host16(&corrected_payload_header[3], 10);
	bitlength = (length+4)*8;

	/*Un-FEC 2/3 it */
	char *corrected;
	corrected = unfec23(stream, bitlength);

	length += 2;
	size -= bitlength;

	if(0 > size)
		return 1;

	for(count = 0; count < length+2; count++)
		corrected[count] = gr_to_normal(corrected+(8*count));
		//FIXME corrected now breaks air/host rules

	crc = crcgen(corrected, length, UAP);

	check = corrected[length+1] | corrected[length] << 8;
	if(crc != check)
		printf("ERROR: UAPs do not match\n");
	else
		printf("UAP confirmed by CRC check\n");

	d_payload_size = length - 1;
	return 0;
}

/* DH3 packet */
int bluetooth_dump::DH3(char *stream, int UAP, int size)
{
	int length, count;
	uint16_t crc, check;	
	length = 0;

	if(8 >= size)
		return 1;

	length = air_to_host16(&stream[3], 10);
	length += 2;
	size -= 8*(length+2);

	if(0 > size)
		return 1;

	for(count = 0; count < length+2; count++)
		stream[count] = gr_to_normal(stream+(8*count));

	crc = crcgen(stream, length, UAP);
	check = stream[length+1] | stream[length] << 8;

	if(crc != check)
		printf("ERROR: UAPs do not match\n");
	else
		printf("UAP confirmed by CRC check\n");

	d_payload_size = length - 1;
	return 0;
}

/* AUX1 packet */
int bluetooth_dump::AUX1(char *stream, int size)
{
	int length;

	if(8 >= size)
		return 1;

	length = air_to_host8(&stream[3], 5);
	printf(" Length:%d\n", length);
	length++;

	d_payload_size = length;
	return 0;
}

/* POLL packet */
int bluetooth_dump::POLL()
{
	printf(" No payload\n");
	return 0;
}

/* FHS packet */
int bluetooth_dump::FHS(char *stream, int UAP)
{
	int length;
	uint8_t payload_UAP;
	uint16_t NAP;
	length = 10;
	char *corrected;
	unfec23(stream, length*8);

	payload_UAP = air_to_host8(&corrected[64], 8);

	NAP = air_to_host16(&corrected[72], 16);

	if(UAP == payload_UAP)
	{
		printf("\nNAP:%04x clk:", NAP);
		printf("%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d\n", stream[115], stream[116], stream[117], stream[118], stream[119], stream[120], stream[121], stream[122], stream[123], stream[124], stream[125], stream[126], stream[127], stream[128], stream[129], stream[130], stream[131], stream[132], stream[133], stream[134], stream[135], stream[136], stream[137], stream[138], stream[139]);
	} else {
		printf("\nUAPs don't match\n");
	}
	d_payload_size = length;
	return 0;
}

/* NULL packet */
int bluetooth_dump::null_packet()
{
	printf(" No payload\n");
	d_payload_size = 0;
	return 0;
}

/* Pointer to start of header, UAP */
int bluetooth_dump::UAP_from_hec(char *packet, uint8_t hec)
{
	char byte;
	int count;

	byte = *(packet + 1);

	for(count = 0; count < 10; count++)
	{
		if(2==count)
			byte = *packet;

		/*Bit 1*/
		hec ^= ((hec & 0x01)<<1);
		/*Bit 2*/
		hec ^= ((hec & 0x01)<<2);
		/*Bit 5*/
		hec ^= ((hec & 0x01)<<5);
		/*Bit 7*/
		hec ^= ((hec & 0x01)<<7);

		hec = (hec >> 1) | (((hec & 0x01) ^ (byte & 0x01)) << 7);
		byte >>= 1;
	}
	return hec;
}

void bluetooth_dump::header()
{
	char *stream = d_stream + d_consumed + 72;
	int count, x;
	x = 0;

	/* Decode the packet header */
	for(count = 0; count < 54;)
	{
		if(count == 24)
			{x++; stream[x] = 0;}

		if(count == 30)
			{x++; stream[x] = 0;}

		int a, b, c;
		a = count++;
		b = count++;
		c = count++;

		stream[x] = (stream[x] << 1) | ((stream[a] & stream[b]) | (stream[b] & stream[c]) | (stream[c] & stream[a]));

	}

	/* Get the UAP from the HEC */
	d_UAP = UAP_from_hec(stream, stream[2]);
	d_packet_type = (stream[0] & 0x1e)>>1;

}

/* Pointer to start of packet, length of packet in bytes, UAP */
uint16_t bluetooth_dump::crcgen(char *packet, int length, int UAP)
{
	char byte;
	uint16_t reg, count, counter;

	reg = UAP & 0xff;
	for(count = 0; count < length; count++)
	{
		byte = *packet++;
		for(counter = 0; counter < 8; counter++)
		{
			reg = (reg << 1) | (((reg & 0x8000)>>15) ^ ((byte & 0x80) >> 7));
			byte <<= 1;

			/*Bit 5*/
			reg ^= ((reg & 0x0001)<<5);

			/*Bit 12*/
			reg ^= ((reg & 0x0001)<<12);
		}
	}
	return reg;
}

int bluetooth_dump::payload()
{
	char *stream = d_stream + d_consumed;
	int size;
	uint8_t type;

	type = d_packet_type;
	size = d_stream_length - d_consumed;

	switch(type) {
		case 0: return null_packet();
		case 1: return DV(stream, d_UAP, size);
		case 2: return DH1(stream, d_UAP, size);
		case 3: return EV4(stream, d_UAP, size);
		case 4: return FHS(stream, d_UAP);
		case 5: return DM3(stream, d_UAP, size);
		case 6: return HV2(stream);
		case 7: return DM3(stream, d_UAP, size);
		case 8: return POLL();
		case 9: return AUX1(stream, size);
		case 10: return HV1(stream);
		case 11: return EV5(stream, d_UAP, size);
		case 12: return DM1(stream, d_UAP, size);
		case 13: return DH3(stream, d_UAP, size);
		case 14: return HV3(stream);
		case 15: return DH3(stream, d_UAP, size);
	}
	return 1;
}

/* Looks for an AC in the stream */
int bluetooth_dump::sniff_ac()
{
	int jump, count;
	uint16_t trailer; // barker code plus trailer
	uint32_t LAP;
	char *stream;
	int jumps[16] = {3,2,1,3,3,0,2,3,3,2,0,3,3,1,2,3};

	for(count = 0; count < d_stream_length; count += jump)
	{
		stream = &d_stream[count];
		jump = jumps[stream[0] << 3 | stream[1] << 2 | stream[2] << 1 | stream[3]];
		if(0 == jump)
		{
			/* Found the start, now check the end... */
			trailer = air_to_host16(&stream[61], 11);
			/* stream[4] should probably be used in the jump trick instead of here.
			 * Then again, an even better solution would have some error tolerance,
			 * but we would probably have to abandon the jump trick. */
			if((stream[4] == stream[0]) && ((0x558 == trailer) || (0x2a7 == trailer)))
			{
				LAP = air_to_host32(&stream[38], 24);
				if(check_ac(stream, LAP))
				{
					if(general_inquiry_LAP == LAP)
						printf("ID??\n");//aclength = 68;
					d_LAP = LAP;
					return count;
				}
			}
			/* look for barker code without 4 bit trailer */
			if((trailer & 0x7f == 0x58) || (trailer & 0x7f == 0x27))
			{
				printf("ID??\n");
				LAP = air_to_host32(&stream[38], 24);
				if(check_ac(stream, LAP))
				{
					d_LAP = LAP;
					printf("d_LAP: %06x\n", d_LAP);
					return count;
				}
			}
			jump = 1;
		}
	}
	return -1;
}
