/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "bluetooth_multi_hopper.h"
#include "bluetooth_packet.h"

/*
 * Create a new instance of bluetooth_multi_hopper and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
bluetooth_multi_hopper_sptr
bluetooth_make_multi_hopper(double sample_rate, double center_freq, int squelch_threshold, int LAP, bool aliased)
{
  return bluetooth_multi_hopper_sptr (new bluetooth_multi_hopper(sample_rate, center_freq, squelch_threshold, LAP, aliased));
}

//private constructor
bluetooth_multi_hopper::bluetooth_multi_hopper(double sample_rate, double center_freq, int squelch_threshold, int LAP, bool aliased)
  : bluetooth_multi_block(sample_rate, center_freq, squelch_threshold)
{
	d_LAP = LAP;
	d_aliased = aliased;
	d_previous_slot = 0;
	d_first_packet_slot = -1;
	d_have_clock6 = false;
	d_have_clock27 = false;
	set_symbol_history(3125);
	d_piconet = bluetooth_make_piconet(d_LAP);
	printf("lowest channel: %d, highest channel %d\n", d_low_channel, d_high_channel);

	/* Tun interface */
	chan_name = "gr-bluetooth";

	if((d_tunfd = mktun(chan_name, d_ether_addr)) == -1) {
		fprintf(stderr, "warning: was not able to open TUN device, "
		   "disabling Wireshark interface\n");
		// throw std::runtime_error("cannot open TUN device");
	}
}

//virtual destructor.
bluetooth_multi_hopper::~bluetooth_multi_hopper ()
{
}

int 
bluetooth_multi_hopper::work(int noutput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items)
{
	int retval, interval, current_slot, channel, num_symbols, latest_ac;
	char symbols[history()]; //poor estimate but safe
	int num_candidates = -1;

	current_slot = (int) (d_cumulative_count / d_samples_per_slot);
	interval = current_slot - d_previous_slot;

	if (d_have_clock27) {
		/* now that we know the clock and UAP, follow along and sniff each time slot on the correct channel */
		hopalong(input_items, symbols, current_slot);
	} else {
		//FIXME maybe limit to one channel for real-time performance
		for (channel = d_low_channel; channel <= d_high_channel; channel++)
		{
			num_symbols = channel_symbols(channel, input_items, symbols, history());
	
			if (num_symbols >= 72 )
			{
				//FIXME this will break with squelch, but we don't want to look beyond one slot for ACs:
				latest_ac = (num_symbols - 72) < 625 ? (num_symbols - 72) : 625;
				retval = bluetooth_packet::sniff_ac(symbols, latest_ac);
				if(retval > -1) {
					bluetooth_packet_sptr packet = bluetooth_make_packet(&symbols[retval], num_symbols - retval);
					if(packet->get_LAP() == d_LAP) {
						if(!d_have_clock6) {
							/* working on CLK1-6/UAP discovery */
							d_have_clock6 = d_piconet->UAP_from_header(packet, interval, channel);
							if(d_first_packet_slot == -1)
								d_first_packet_slot = current_slot;
							if(d_have_clock6) {
								/* got CLK1-6/UAP, start working on CLK1-27 */
								printf("\nCalculating complete hopping sequence.\n");
								printf("%d initial CLK1-27 candidates\n", d_piconet->init_hop_reversal(d_aliased));
								/* use previously observed packets to eliminate candidates */
								num_candidates = d_piconet->winnow();
								printf("%d CLK1-27 candidates remaining\n", num_candidates);
							}
						} else {
							/* continue working on CLK1-27 */
							/* we need timing information from an additional packet, so run through UAP_from_header() again */
							d_have_clock6 = d_piconet->UAP_from_header(packet, interval, channel);
							if (!d_have_clock6) {
								reset();
								break;
							}
							num_candidates = d_piconet->winnow();
							printf("%d CLK1-27 candidates remaining\n", num_candidates);
						}
						/* CLK1-27 results */
						if(num_candidates == 1) {
							/* win! */
							printf("\nAcquired CLK1-27 = 0x%07x\n", d_piconet->get_clock());
							d_have_clock27 = true;
							d_clock_offset = d_piconet->get_clock() - d_first_packet_slot;
						} else if(num_candidates == 0) {
							/* fail! */
							reset();
						}
						d_previous_slot = current_slot;
						break;
					}
				}
			}
		}
	}
	d_cumulative_count += (int) d_samples_per_slot;

    /* 
	 * The runtime system wants to know how many output items we produced, assuming that this is equal
	 * to the number of input items consumed.  We tell it that we produced/consumed one time slot of
	 * input items so that our next run starts one slot later.
	 */
	return (int) d_samples_per_slot;
}

/* follow a piconet's hopping sequence and look for packets on the appropriate channel for each time slot */
void bluetooth_multi_hopper::hopalong(gr_vector_const_void_star &input_items, char *symbols, int current_slot)
{
	int ac_index, channel, num_symbols, latest_ac;
	uint32_t clock27 = (current_slot + d_clock_offset) % bluetooth_piconet::SEQUENCE_LENGTH;
	channel = d_piconet->hop(clock27);
	if (channel >= d_low_channel && channel <= d_high_channel) {
		//FIXME history() + noutput_items?
		num_symbols = channel_symbols(channel, input_items, symbols, history());
		if (num_symbols >= 72 ) {
			latest_ac = (num_symbols - 72) < 625 ? (num_symbols - 72) : 625;
			ac_index = bluetooth_packet::sniff_ac(symbols, latest_ac);
			if(ac_index > -1) {
				bluetooth_packet_sptr packet = bluetooth_make_packet(&symbols[ac_index], num_symbols - ac_index);
				packet->set_clock(clock27);
				packet->set_UAP(d_piconet->get_UAP());
				if(packet->get_LAP() == d_LAP) {
					printf("clock 0x%07x, channel %d: ", clock27, channel);
					packet->set_UAP(d_piconet->get_UAP());
					packet->set_clock(clock27);
					packet->decode_header();
					packet->decode_payload();
					packet->print();
					int payload_length = packet->get_payload_length();
					if(payload_length) {
						char *data = packet->tun_format();
						int addr = (packet->get_UAP() << 24) | packet->get_LAP();
						write_interface(d_tunfd, (unsigned char *)data, payload_length, 0, addr, HCI_H1);
					}
				}
			}
		}
	}
}

/* start everything over, even CLK1-6/UAP discovery, because we can't trust what we have */
void bluetooth_multi_hopper::reset()
{
	printf("Failed to acquire clock. starting over . . .\n\n");
	//FIXME maybe ought to just reset the existing piconet
	d_piconet = bluetooth_make_piconet(d_LAP);
	d_first_packet_slot = -1;
	d_have_clock6 = false;
}
