# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.

import _bluetooth
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class bluetooth_sniffer_sptr(object):
    """Proxy of C++ bluetooth_sniffer_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> bluetooth_sniffer_sptr
        __init__(self,  p) -> bluetooth_sniffer_sptr
        """
        this = _bluetooth.new_bluetooth_sniffer_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _bluetooth.bluetooth_sniffer_sptr___deref__(*args)

    __swig_destroy__ = _bluetooth.delete_bluetooth_sniffer_sptr
    __del__ = lambda self : None;
    def history(*args):
        """history(self) -> unsigned int"""
        return _bluetooth.bluetooth_sniffer_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _bluetooth.bluetooth_sniffer_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _bluetooth.bluetooth_sniffer_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _bluetooth.bluetooth_sniffer_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _bluetooth.bluetooth_sniffer_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _bluetooth.bluetooth_sniffer_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _bluetooth.bluetooth_sniffer_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _bluetooth.bluetooth_sniffer_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _bluetooth.bluetooth_sniffer_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _bluetooth.bluetooth_sniffer_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _bluetooth.bluetooth_sniffer_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _bluetooth.bluetooth_sniffer_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _bluetooth.bluetooth_sniffer_sptr_check_topology(*args)

bluetooth_sniffer_sptr_swigregister = _bluetooth.bluetooth_sniffer_sptr_swigregister
bluetooth_sniffer_sptr_swigregister(bluetooth_sniffer_sptr)


def bluetooth_sniffer_block(*args):
  """bluetooth_sniffer_block(bluetooth_sniffer_sptr r) -> gr_block_sptr"""
  return _bluetooth.bluetooth_sniffer_block(*args)
bluetooth_sniffer_sptr.block = lambda self: bluetooth_sniffer_block (self)
bluetooth_sniffer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def sniffer(*args):
  """sniffer(int lap, int uap) -> bluetooth_sniffer_sptr"""
  return _bluetooth.sniffer(*args)
class bluetooth_LAP_sptr(object):
    """Proxy of C++ bluetooth_LAP_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> bluetooth_LAP_sptr
        __init__(self,  p) -> bluetooth_LAP_sptr
        """
        this = _bluetooth.new_bluetooth_LAP_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _bluetooth.bluetooth_LAP_sptr___deref__(*args)

    __swig_destroy__ = _bluetooth.delete_bluetooth_LAP_sptr
    __del__ = lambda self : None;
    def history(*args):
        """history(self) -> unsigned int"""
        return _bluetooth.bluetooth_LAP_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _bluetooth.bluetooth_LAP_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _bluetooth.bluetooth_LAP_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _bluetooth.bluetooth_LAP_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _bluetooth.bluetooth_LAP_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _bluetooth.bluetooth_LAP_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _bluetooth.bluetooth_LAP_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _bluetooth.bluetooth_LAP_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _bluetooth.bluetooth_LAP_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _bluetooth.bluetooth_LAP_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _bluetooth.bluetooth_LAP_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _bluetooth.bluetooth_LAP_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _bluetooth.bluetooth_LAP_sptr_check_topology(*args)

bluetooth_LAP_sptr_swigregister = _bluetooth.bluetooth_LAP_sptr_swigregister
bluetooth_LAP_sptr_swigregister(bluetooth_LAP_sptr)


def bluetooth_LAP_block(*args):
  """bluetooth_LAP_block(bluetooth_LAP_sptr r) -> gr_block_sptr"""
  return _bluetooth.bluetooth_LAP_block(*args)
bluetooth_LAP_sptr.block = lambda self: bluetooth_LAP_block (self)
bluetooth_LAP_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def LAP(*args):
  """LAP(int x) -> bluetooth_LAP_sptr"""
  return _bluetooth.LAP(*args)
class bluetooth_UAP_sptr(object):
    """Proxy of C++ bluetooth_UAP_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> bluetooth_UAP_sptr
        __init__(self,  p) -> bluetooth_UAP_sptr
        """
        this = _bluetooth.new_bluetooth_UAP_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _bluetooth.bluetooth_UAP_sptr___deref__(*args)

    __swig_destroy__ = _bluetooth.delete_bluetooth_UAP_sptr
    __del__ = lambda self : None;
    def history(*args):
        """history(self) -> unsigned int"""
        return _bluetooth.bluetooth_UAP_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _bluetooth.bluetooth_UAP_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _bluetooth.bluetooth_UAP_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _bluetooth.bluetooth_UAP_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _bluetooth.bluetooth_UAP_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _bluetooth.bluetooth_UAP_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _bluetooth.bluetooth_UAP_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _bluetooth.bluetooth_UAP_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _bluetooth.bluetooth_UAP_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _bluetooth.bluetooth_UAP_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _bluetooth.bluetooth_UAP_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _bluetooth.bluetooth_UAP_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _bluetooth.bluetooth_UAP_sptr_check_topology(*args)

bluetooth_UAP_sptr_swigregister = _bluetooth.bluetooth_UAP_sptr_swigregister
bluetooth_UAP_sptr_swigregister(bluetooth_UAP_sptr)


def bluetooth_UAP_block(*args):
  """bluetooth_UAP_block(bluetooth_UAP_sptr r) -> gr_block_sptr"""
  return _bluetooth.bluetooth_UAP_block(*args)
bluetooth_UAP_sptr.block = lambda self: bluetooth_UAP_block (self)
bluetooth_UAP_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def UAP(*args):
  """UAP(int LAP, int pkts) -> bluetooth_UAP_sptr"""
  return _bluetooth.UAP(*args)
class bluetooth_dump_sptr(object):
    """Proxy of C++ bluetooth_dump_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> bluetooth_dump_sptr
        __init__(self,  p) -> bluetooth_dump_sptr
        """
        this = _bluetooth.new_bluetooth_dump_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _bluetooth.bluetooth_dump_sptr___deref__(*args)

    __swig_destroy__ = _bluetooth.delete_bluetooth_dump_sptr
    __del__ = lambda self : None;
    def history(*args):
        """history(self) -> unsigned int"""
        return _bluetooth.bluetooth_dump_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _bluetooth.bluetooth_dump_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _bluetooth.bluetooth_dump_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _bluetooth.bluetooth_dump_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _bluetooth.bluetooth_dump_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _bluetooth.bluetooth_dump_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _bluetooth.bluetooth_dump_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _bluetooth.bluetooth_dump_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _bluetooth.bluetooth_dump_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _bluetooth.bluetooth_dump_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _bluetooth.bluetooth_dump_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _bluetooth.bluetooth_dump_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _bluetooth.bluetooth_dump_sptr_check_topology(*args)

bluetooth_dump_sptr_swigregister = _bluetooth.bluetooth_dump_sptr_swigregister
bluetooth_dump_sptr_swigregister(bluetooth_dump_sptr)


def bluetooth_dump_block(*args):
  """bluetooth_dump_block(bluetooth_dump_sptr r) -> gr_block_sptr"""
  return _bluetooth.bluetooth_dump_block(*args)
bluetooth_dump_sptr.block = lambda self: bluetooth_dump_block (self)
bluetooth_dump_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def dump(*args):
  """dump() -> bluetooth_dump_sptr"""
  return _bluetooth.dump(*args)


