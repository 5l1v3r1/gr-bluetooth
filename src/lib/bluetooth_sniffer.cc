/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "bluetooth_sniffer.h"
#include "bluetooth_packet.h"

/*
 * Create a new instance of bluetooth_sniffer and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
bluetooth_sniffer_sptr 
bluetooth_make_sniffer (int lap, int uap)
{
  return bluetooth_sniffer_sptr (new bluetooth_sniffer (lap, uap));
}

//private constructor
bluetooth_sniffer::bluetooth_sniffer (int lap, int uap)
  : bluetooth_block ()
{
	d_LAP = lap;
	d_UAP = uap;
	d_consumed = 0;
	printf("Bluetooth packet sniffer\n\n");

	/* ensure that we are always given at least 3125 symbols (5 time slots) */
	set_history(3125);
}

//virtual destructor.
bluetooth_sniffer::~bluetooth_sniffer ()
{
}

int 
bluetooth_sniffer::work (int noutput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items)
{
	d_stream = (char *) input_items[0];
	int retval;

	retval = bluetooth_packet::sniff_ac(d_stream, noutput_items);
	if(-1 == retval) {
		d_consumed = noutput_items;
	} else {
		d_consumed = retval;
		bluetooth_packet_sptr packet = bluetooth_make_packet(&d_stream[retval], 3125 + noutput_items - retval);
		if(packet->get_LAP() == d_LAP)
			new_header(noutput_items);
		d_consumed += 126;
	}

  // Tell runtime system how many output items we produced.
	return d_consumed;
}

void bluetooth_sniffer::new_header(int length)
{
	char *stream = d_stream + d_consumed + 72;
	char header[18];
	char unwhitened[18];
	uint8_t unwhitened_air[3]; // more than one bit per byte but in air order
	uint8_t UAP, ltadr;
	int count, size;

	size = length - 126;
	//printf("Start Header");

	unfec13(stream, header, 18);

	for(count = 0; count < 64; count++)
	{
		unwhiten(header, unwhitened, count, 18, 0);

		unwhitened_air[0] = unwhitened[0] << 7 | unwhitened[1] << 6 | unwhitened[2] << 5 | unwhitened[3] << 4 | unwhitened[4] << 3 | unwhitened[5] << 2 | unwhitened[6] << 1 | unwhitened[7];
		unwhitened_air[1] = unwhitened[8] << 1 | unwhitened[9];
		unwhitened_air[2] = unwhitened[10] << 7 | unwhitened[11] << 6 | unwhitened[12] << 5 | unwhitened[13] << 4 | unwhitened[14] << 3 | unwhitened[15] << 2 | unwhitened[16] << 1 | unwhitened[17];

		UAP = bluetooth_packet::UAP_from_hec(unwhitened_air);

		if(UAP != d_UAP)
			continue;

		d_packet_type = (unwhitened_air[0] & 0x1e) >> 1;
		uint8_t ltadrs[8] = {0, 4, 2, 6, 1, 5, 3, 7};
		ltadr = ltadrs[(unwhitened_air[0] & 0xe0) >> 5];

		if(1 != ltadr)
			continue;

		switch(d_packet_type)
		{
			case 0:printf("NULL Packet\n");
			break;
			case 1:printf("DV Slots:1\n");
			break;
			case 2:printf("DH1 Slots:1\n");
				//printf("\n%02x %02x %02x\n", unwhitened_air[0], unwhitened_air[1], unwhitened_air[2]);
				//DH1(size, count);
				break;
			case 3:printf("EV4 Slots:3\n");
			 break;
			case 4:printf("FHS Slots:1\n");
			 break;
			case 5:printf("DM3 Slots:3\n");
			 break;
			case 6:printf("HV2 Slots:1\n");
				//printf("\n%02x %02x %02x\n", unwhitened_air[0], unwhitened_air[1], unwhitened_air[2]);
				//HV2(size, count);
				break;
			case 7:printf("DM5 Slots:5\n");
				//printf("\n%02x %02x %02x\n", unwhitened_air[0], unwhitened_air[1], unwhitened_air[2]);
				//DM5(size, count);
				break;
			case 8:printf("POLL Slots:1\n");
			 break;
			case 9:printf("AUX1 Slots:1\n");
			 break;
			case 10:printf("HV1 Slots:1\n");
			 break;
			case 11:printf("EV5 Slots:3\n");
			 break;
			case 12:printf("DM1 Slots:1 clock: %d\n", count);
				DM1(size, count);
				break;
			case 13:printf("DH3 Slots:3\n");
			break;
			case 14:printf("HV3/EV3 Slots:1\n"); 
				break;
			case 15:printf("DH5 Slots:5\n");
				//DH5(size, count);
				break;
		}
	}

	//printf("\nEnd Header\n\n");
}

int bluetooth_sniffer::DM1(int size, int clock)
{
	char *stream = d_stream + d_consumed + 126;
	int count, bitlength;
	uint16_t crc, check;
	uint8_t length, llid;
	char header[8];
	char *corrected_header;

	if(8 >= size)
		return 1;

	corrected_header = unfec23(stream, 8);
	if(NULL == corrected_header)
		return 0;
	unwhiten(corrected_header, header, clock, 8, 18);
	free(corrected_header);

	printf("\npayload header: ");
	for(count = 0; count < 8; count++)
	{
		printf("%d", header[count]);
	}
	printf("\n");

	llid = air_to_host8(header, 2);
	switch (llid) {
		case 1: printf("Continuation of fragment\n");break;
		case 2: printf("Start of fragment\n");break;
	}

	length = air_to_host8(&header[3], 5);
	printf("length = %d\n", length);
	bitlength = (length+3)*8;

	if((length+3)*12 >= size)
		return 1;

	char *corrected;
	char payload[bitlength];
	corrected = unfec23(stream, bitlength);
	if(NULL == corrected)
		return 0;
	unwhiten(corrected, payload, clock, bitlength, 18);
	free(corrected);
	for(count = 0; count < bitlength; count++)
	{
		if(count == bitlength-16)
			printf("\nPacket CRC:");
		printf("%d", payload[count]);
	}
	printf("\n");
	crc = crcgen(payload, (length+1)*8, d_UAP);
	check = air_to_host16(&payload[(length+1)*8], 16);
	if(crc == check)
		printf("CRC verified\n");
	else
		printf("CRC incorrect\n");
}


int bluetooth_sniffer::DM5(int size, int clock)
{
	char *stream = d_stream + d_consumed + 126;
	int count, length, bitlength;
	uint16_t crc, check;
	uint8_t llid;
	char *corrected_header;
	char unwhitened_header[16];

	if(16 >= size)
		return 1;
	corrected_header = unfec23(stream, 16);
	if(NULL == corrected_header)
		return 0;
	printf("\nwhitened payload header: ");
	for(count = 0; count < 16; count++)
	{
		printf("%d", corrected_header[count]);
	}
	printf("\n");
	unwhiten(corrected_header, unwhitened_header, clock, 16, 18);
	free(corrected_header);

	printf("\npayload header: ");
	for(count = 0; count < 16; count++)
	{
		printf("%d", unwhitened_header[count]);
	}
	printf("\n");

	llid = air_to_host8(unwhitened_header, 2);
	printf("\nLLID -> %d", llid);

	length = air_to_host16(&unwhitened_header[3], 10);
	printf("\nclock = %d  length = %d\n", clock, length);

	if((length+4)*8 >= size)
		return 1;

	//char *corrected_payload;
	//corrected_payload = unfec23(stream, length*8);
	//FIXME what are we doing here?
}
