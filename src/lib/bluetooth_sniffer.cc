/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <bluetooth_sniffer.h>
#include <gr_io_signature.h>

/*
 * Create a new instance of bluetooth_sniffer and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
bluetooth_sniffer_sptr 
bluetooth_make_sniffer (int lap, int uap)
{
  return bluetooth_sniffer_sptr (new bluetooth_sniffer (lap, uap));
}


static const int IN = 1;	// number of input streams
static const int OUT = 0;	// size and number of output streams

  /* index into whitening data array */
static const uint8_t d_indicies[64] = {99, 85, 17, 50, 102, 58, 108, 45, 92, 62, 32, 118, 88, 11, 80, 2, 37, 69, 55, 8, 20, 40, 74, 114, 15, 106, 30, 78, 53, 72, 28, 26, 68, 7, 39, 113, 105, 77, 71, 25, 84, 49, 57, 44, 61, 117, 10, 1, 123, 124, 22, 125, 111, 23, 42, 126, 6, 112, 76, 24, 48, 43, 116, 0};
  /* whitening data */
static const uint8_t d_whitening_data[127] = {1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1};

//private constructor
bluetooth_sniffer::bluetooth_sniffer (int lap, int uap)
  : gr_sync_block ("sniffer",
	      gr_make_io_signature (IN, IN, sizeof (char)),
	      gr_make_io_signature (OUT, OUT, OUT))
{
	d_LAP = lap;
	d_UAP = uap;
	d_payload_size = 0;
	d_packet_type = -1;
	d_stream_length = 0;
	d_consumed = 0;
	flag = 0;
	printf("Bluetooth packet sniffer\n\n");
}

//virtual destructor.
bluetooth_sniffer::~bluetooth_sniffer ()
{
}

int 
bluetooth_sniffer::work (int noutput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items)
{
	d_stream = (char *) input_items[0];
	d_consumed = 0;
	d_stream_length = noutput_items;
	int retval = 0;
	d_payload_size = 0;
	d_packet_type = -1;

while(d_stream_length) {
	if((noutput_items - d_consumed) > 71)
		retval = sniff_ac();
	else {
		//The flag is used to avoid being stuck with <71 input bits in file mode
		if(flag)
			d_consumed = noutput_items;
		flag = !flag;
		break;
	}

	if(-1 == retval) {
		d_consumed = noutput_items;
		break;
	}

	d_consumed += retval;

	if(126+retval <= noutput_items) {
		new_header();
	} else { //Drop out and wait to be run again
		break;
	}

	d_consumed += 126;

	retval = payload();
	if(0 == retval) {
		print_out();
		d_consumed += (d_payload_size*8);
	} else {//We're having payload trouble, dump the stream
		d_consumed = noutput_items;
		break;
	}

    d_payload_size = 0;
    d_packet_type = -1;
    d_stream_length = noutput_items - d_consumed;
}
  // Tell runtime system how many output items we produced.
  if(d_consumed >= noutput_items)
	return noutput_items;
  else
	return d_consumed;
}

/* returns the payload length */
int bluetooth_sniffer::payload_header(uint8_t *stream)
{
	return stream[3] | stream[4] << 1 | stream[5] << 2 | stream[6] << 3 | stream[7] << 4;
}

/* returns the payload length */
int bluetooth_sniffer::long_payload_header(uint8_t *stream)
{
	return stream[3] | stream[4] << 1 | stream[5] << 2 | stream[6] << 3 | stream[7] << 4 | stream[8] << 5 | stream[9] << 6 | stream[10] << 7 | stream[11] << 8;
}

/* Converts 8 bytes of grformat to a single byte */
char bluetooth_sniffer::gr_to_normal(char *stream)
{
	return stream[0] << 7 | stream[1] << 6 | stream[2] << 5 | stream[3] << 4 | stream[4] << 3 | stream[5] << 2 | stream[6] << 1 | stream[7];
}

/* Version to get round the uint8_t - char thing */
char bluetooth_sniffer::gr_to_normal(uint8_t *stream)
{
	return stream[0] << 7 | stream[1] << 6 | stream[2] << 5 | stream[3] << 4 | stream[4] << 3 | stream[5] << 2 | stream[6] << 1 | stream[7];
}

/* stream points to the stream of data
   length is length in bits of the data
   before it was encoded with fec2/3 */
char *bluetooth_sniffer::unfec23(char *stream, int length)
{
	int count, pointer;
	pointer = -5;

	for(count = 0; count < length; count++)
	{
		if((count % 10) == 0)
			pointer += 5;

		stream[count] = stream[pointer++];
	}
	return stream;
}


void bluetooth_sniffer::print_out()
{
		
	printf("LAP:%06x UAP:%02x\nType: ", d_LAP, d_UAP);
	switch(d_packet_type)
	{
		case 0:printf("NULL Slots:1"); break;
		case 1:printf("DV Slots:1"); break;
		case 2:printf("DH1 Slots:1"); break;
		case 3:printf("EV4 Slots:3"); break;
		case 4:printf("FHS Slots:1"); break;
		case 5:printf("DM3 Slots:3"); break;
		case 6:printf("HV2 Slots:1"); break;
		case 7:printf("DM5 Slots:5"); break;
		case 8:printf("POLL Slots:1"); break;
		case 9:printf("AUX1 Slots:1"); break;
		case 10:printf("HV1 Slots:1"); break;
		case 11:printf("EV5 Slots:3"); break;
		case 12:printf("DM1 Slots:1"); break;
		case 13:printf("DH3 Slots:3"); break;
		case 14:printf("HV3/EV3 Slots:1"); break;
		case 15:printf("DH5 Slots:5"); break;
	}
	printf(" Length:%d\n\n", d_payload_size);
}


//This is all imported from packet_sniffer.c
//It has been converted to C++
uint8_t *bluetooth_sniffer::codeword(uint8_t *data, int length, int k)
/*
 * Compute redundacy cw[], the coefficients of b(x). The redundancy
 * polynomial b(x) is the remainder after dividing x^(length-k)*data(x)
 * by the generator polynomial g(x).
 */
{
	int    i, j;
	uint8_t *g, *cw, feedback;

	g = (uint8_t *) malloc(35);
	g[0] = 1;
	g[1] = 0;
	g[2] = 0;
	g[3] = 1;
	g[4] = 0;
	g[5] = 1;
	g[6] = 0;
	g[7] = 1;
	g[8] = 1;
	g[9] = 0;
	g[10] = 1;
	g[11] = 1;
	g[12] = 1;
	g[13] = 1;
	g[14] = 0;
	g[15] = 0;
	g[16] = 1;
	g[17] = 0;
	g[18] = 0;
	g[19] = 0;
	g[20] = 1;
	g[21] = 1;
	g[22] = 1;
	g[23] = 0;
	g[24] = 1;
	g[25] = 0;
	g[26] = 1;
	g[27] = 0;
	g[28] = 0;
	g[29] = 0;
	g[30] = 0;
	g[31] = 1;
	g[32] = 1;
	g[33] = 0;
	g[34] = 1;

	cw = (uint8_t *) malloc(34);

	for (i = 0; i < length - k; i++)
		cw[i] = 0;
	for (i = k - 1; i >= 0; i--) {
		feedback = data[i] ^ cw[length - k - 1];
		if (feedback != 0) {
			for (j = length - k - 1; j > 0; j--)
				if (g[j] != 0)
					cw[j] = cw[j - 1] ^ feedback;
				else
					cw[j] = cw[j - 1];
			cw[0] = g[0] && feedback;
		} else {
			for (j = length - k - 1; j > 0; j--)
				cw[j] = cw[j - 1];
			cw[0] = 0;
		}
	}
	free(g);
	return cw;
}

/* Reverse the bits in a byte */
uint8_t bluetooth_sniffer::reverse(char byte)
{
	return (byte & 0x80) >> 7 | (byte & 0x40) >> 5 | (byte & 0x20) >> 3 | (byte & 0x10) >> 1 | (byte & 0x08) << 1 | (byte & 0x04) << 3 | (byte & 0x02) << 5 | (byte & 0x01) << 7;
}

/* Endianness - Assume LAP is MSB first, rest done LSB first */
uint8_t *bluetooth_sniffer::acgen(int LAP)
{
	uint8_t *retval, *pn, count, *cw, *data;
	retval = (uint8_t *) malloc(9);
	pn = (uint8_t *) malloc(9);
	data = (uint8_t *) malloc(30);

	LAP = reverse((LAP & 0xff0000)>>16) | (reverse((LAP & 0x00ff00)>>8)<<8) | (reverse(LAP & 0x0000ff)<<16);

	retval[4] = (LAP & 0xc00000)>>22;
	retval[5] = (LAP & 0x3fc000)>>14;
	retval[6] = (LAP & 0x003fc0)>>6;
	retval[7] = (LAP & 0x00003f)<<2;

	/* Trailer */
	if(LAP & 0x1)
	{	retval[7] |= 0x03;
		retval[8] = 0x2a;
	} else
		retval[8] = 0xd5;

	pn[0] = 0x03;
	pn[1] = 0xF2;
	pn[2] = 0xA3;
	pn[3] = 0x3D;
	pn[4] = 0xD6;
	pn[5] = 0x9B;
	pn[6] = 0x12;
	pn[7] = 0x1C;
	pn[8] = 0x10;

	for(count = 4; count < 9; count++)
		retval[count] ^= pn[count];

	/* Codeword */
	//g(d) = 0x585713DA9
	data[0] = (retval[4] & 0x02) >> 1;
	data[1] = (retval[4] & 0x01);
	data[2] = (retval[5] & 0x80) >> 7;
	data[3] = (retval[5] & 0x40) >> 6;
	data[4] = (retval[5] & 0x20) >> 5;
	data[5] = (retval[5] & 0x10) >> 4;
	data[6] = (retval[5] & 0x08) >> 3;
	data[7] = (retval[5] & 0x04) >> 2;
	data[8] = (retval[5] & 0x02) >> 1;
	data[9] = (retval[5] & 0x01);
	data[10] = (retval[6] & 0x80) >> 7;
	data[11] = (retval[6] & 0x40) >> 6;
	data[12] = (retval[6] & 0x20) >> 5;
	data[13] = (retval[6] & 0x10) >> 4;
	data[14] = (retval[6] & 0x08) >> 3;
	data[15] = (retval[6] & 0x04) >> 2;
	data[16] = (retval[6] & 0x02) >> 1;
	data[17] = (retval[6] & 0x01);
	data[18] = (retval[7] & 0x80) >> 7;
	data[19] = (retval[7] & 0x40) >> 6;
	data[20] = (retval[7] & 0x20) >> 5;
	data[21] = (retval[7] & 0x10) >> 4;
	data[22] = (retval[7] & 0x08) >> 3;
	data[23] = (retval[7] & 0x04) >> 2;
	data[24] = (retval[7] & 0x02) >> 1;
	data[25] = (retval[7] & 0x01);
	data[26] = (retval[8] & 0x80) >> 7;
	data[27] = (retval[8] & 0x40) >> 6;
	data[28] = (retval[8] & 0x20) >> 5;
	data[29] = (retval[8] & 0x10) >> 4;

	cw = codeword(data, 64, 30);

	retval[0] = cw[0] << 3 | cw[1] << 2 | cw[2] << 1 | cw[3];
	retval[1] = cw[4] << 7 | cw[5] << 6 | cw[6] << 5 | cw[7] << 4 | cw[8] << 3 | cw[9] << 2 | cw[10] << 1 | cw[11];
	retval[2] = cw[12] << 7 | cw[13] << 6 | cw[14] << 5 | cw[15] << 4 | cw[16] << 3 | cw[17] << 2 | cw[18] << 1 | cw[19];
	retval[3] = cw[20] << 7 | cw[21] << 6 | cw[22] << 5 | cw[23] << 4 | cw[24] << 3 | cw[25] << 2 | cw[26] << 1 | cw[27];
	retval[4] = cw[28] << 7 | cw[29] << 6 | cw[30] << 5 | cw[31] << 4 | cw[32] << 3 | cw[33] << 2 | (retval[4] & 0x3);;
	free(cw);

	for(count = 0; count < 9; count++)
		retval[count] ^= pn[count];
	free(pn);

	/* Preamble */
	if(retval[0] & 0x08)
		retval[0] |= 0xa0;
	else
		retval[0] |= 0x50;

	return retval;
}

/* Pointer to start of header, UAP */
int bluetooth_sniffer::UAP_from_hec(uint8_t *packet)
{
	char byte;
	int count;
	uint8_t hec;

	hec = *(packet + 2);
	byte = *(packet + 1);

	for(count = 0; count < 10; count++)
	{
		if(2==count)
			byte = *packet;

		/*Bit 1*/
		hec ^= ((hec & 0x01)<<1);
		/*Bit 2*/
		hec ^= ((hec & 0x01)<<2);
		/*Bit 5*/
		hec ^= ((hec & 0x01)<<5);
		/*Bit 7*/
		hec ^= ((hec & 0x01)<<7);

		hec = (hec >> 1) | (((hec & 0x01) ^ (byte & 0x01)) << 7);
		byte >>= 1;
	}
	return hec;
}


/* Pointer to start of packet, length of packet in bits, UAP */
uint16_t bluetooth_sniffer::crcgen(uint8_t *packet, int length, int UAP)
{
	char byte;
	uint16_t reg, count, counter;

	reg = UAP & 0xff;
	for(count = 0; count < length; count++)
	{
		byte = packet[count];

		reg = (reg << 1) | (((reg & 0x8000)>>15) ^ (byte & 0x01));

		/*Bit 5*/
		reg ^= ((reg & 0x0001)<<5);

		/*Bit 12*/
		reg ^= ((reg & 0x0001)<<12);
	}
	return reg;
}

int bluetooth_sniffer::payload()
{
	return 1;
}

void bluetooth_sniffer::convert_to_grformat(uint8_t input, uint8_t *output)
{
	int count;
	for(count = 0; count < 8; count++)
	{
		output[count] = (input & 0x80) >> 7;
		input <<= 1;
	}
}

/* Create an AC and check it*/
int bluetooth_sniffer::check_ac(char *stream)
{
	int count, LAP, aclength;
	uint8_t *ac, *grdata;
	aclength = 72;

	/* Get LAP */
	LAP = stream[38] | stream[39] << 1 | stream[40] << 2 | stream[41] << 3 | stream[42] << 4 | stream[43] << 5 | stream[44] << 6 | stream[45] << 7 | stream[46] << 8 | stream[47] << 9 | stream[48] << 10 | stream[49] << 11 | stream[50] << 12 | stream[51] << 13 | stream[52] << 14 | stream[53] << 15 | stream[54] << 16 | stream[55] << 17 | stream[56] << 18 | stream[57] << 19 | stream[58] << 20 | stream[59] << 21 | stream[60] << 22 | stream[61] << 23;

	if(LAP != d_LAP)
		return 0;


	/* Generate AC */
	ac = acgen(LAP);

	/* Check AC */
	/* Convert it to grformat, 1 bit per byte, in the LSB */
	grdata = (uint8_t *) malloc(aclength);

	for(count = 0; count < 9; count++)
		convert_to_grformat(ac[count], &grdata[count*8]);

	for(count = 0; count < aclength; count++)
	{
		if(grdata[count] != stream[count])
			return 0;
	}

	return LAP;
}

/* Looks for an AC in the stream */
int bluetooth_sniffer::sniff_ac()
{
	int LAP, jump, count, counter, size;
	char *stream = d_stream;
	int jumps[16] = {3,2,1,3,3,0,2,3,3,2,0,3,3,1,2,3};
	size = d_stream_length;
	count = 0;

	while(size > 72)
	{
		jump = jumps[stream[0] << 3 | stream[1] << 2 | stream[2] << 1 | stream[3]];
		if(0 == jump)
		{
			/* Found the start, now check the end... */
			counter = stream[62] << 9 | stream[63] << 8 | stream[64] << 7 | stream[65] << 6 | stream[66] << 5 | stream[67] << 4 | stream[68] << 3 | stream[69] << 2 | stream[70] << 1 | stream[71];

			if((0x0d5 == counter) || (0x32a == counter))
			{
				if((LAP = check_ac(stream)))
				{
					/*printf("AC\n");
					for(int x = 0; x < 72; x++)
						printf("%d", stream[x]);
					printf("\n");*/
					return count;
				}
			}
			jump = 1;
		}
		count += jump;
		stream += jump;
		size -= jump;
	}
	return -1;
}

void bluetooth_sniffer::unwhiten(uint8_t* input, uint8_t* output, int clock, int length, int skip)
{
	int count, index;
	index = d_indicies[clock & 0x3f];
	index += skip;
	index %= 127;

	for(count = 0; count < length; count++)
	{
		output[count] = input[count] ^ d_whitening_data[index];
		index += 1;
		index %= 127;
	}
}

void bluetooth_sniffer::unwhiten_char(char* input, uint8_t* output, int clock, int length, int skip)
{
	int count, index;
	index = d_indicies[clock & 0x3f];
	index += skip;
	index %= 127;

	for(count = 0; count < length; count++)
	{
		output[count] = input[count] ^ d_whitening_data[index];
		index += 1;
		index %= 127;
	}
}

/* stream points to the stream of data, length is length in bits */
char *bluetooth_sniffer::unfec13(char *stream, uint8_t *output, int length)
{
	int count, a, b, c;

	for(count = 0; count < length; count++)
	{
		a = 3*count;
		b = a + 1;
		c = a + 2;
		output[count] = ((stream[a] & stream[b]) | (stream[b] & stream[c]) | (stream[c] & stream[a]));
	}
	return stream;
}

void bluetooth_sniffer::new_header()
{
	char *stream = d_stream + d_consumed + 72;
	uint8_t header[18];
	uint8_t unwhitened[18];
	uint8_t UAP, ltadr;
	int count, size;

	size = d_stream_length - 126;
	//printf("Start Header");

	unfec13(stream, header, 18);

	for(count = 1; count < 64; count++)
	{
		unwhiten(header, unwhitened, count, 18, 0);

		unwhitened[0] = unwhitened[0] << 7 | unwhitened[1] << 6 | unwhitened[2] << 5 | unwhitened[3] << 4 | unwhitened[4] << 3 | unwhitened[5] << 2 | unwhitened[6] << 1 | unwhitened[7];
		unwhitened[1] = unwhitened[8] << 1 | unwhitened[9];
		unwhitened[2] = unwhitened[10] << 7 | unwhitened[11] << 6 | unwhitened[12] << 5 | unwhitened[13] << 4 | unwhitened[14] << 3 | unwhitened[15] << 2 | unwhitened[16] << 1 | unwhitened[17];

		UAP = UAP_from_hec(unwhitened);

		if(UAP != d_UAP)
			continue;

		d_packet_type = (unwhitened[0] & 0x1e) >> 1;
		uint8_t ltadrs[8] = {0, 4, 2, 6, 1, 5, 3, 7};
		ltadr = ltadrs[(unwhitened[0] & 0xe0) >> 5];

		if(1 != ltadr)
			continue;

		switch(d_packet_type)
		{
			case 0:/*printf("\nNULL Packet"); */
			break;
			case 1://printf("\nDV Slots:1");
			break;
			case 2://printf("\n\nDH1 Slots:1");
				//printf("\n%02x %02x %02x\n", unwhitened[0], unwhitened[1], unwhitened[2]);
				//DH1(size, count);
				break;
			case 3://printf("\nEV4 Slots:3");
			 break;
			case 4://printf("\nFHS Slots:1");
			 break;
			case 5://printf("\nDM3 Slots:3");
			 break;
			case 6://printf("\nHV2 Slots:1");
				//printf("\n%02x %02x %02x\n", unwhitened[0], unwhitened[1], unwhitened[2]);
				//HV2(size, count);
				break;
			case 7://printf("\nDM5 Slots:5");
				//printf("\n%02x %02x %02x\n", unwhitened[0], unwhitened[1], unwhitened[2]);
				//DM5(size, count);
				break;
			case 8://printf("\nPOLL Slots:1");
			 break;
			case 9://printf("\nAUX1 Slots:1");
			 break;
			case 10://printf("\nHV1 Slots:1");
			 break;
			case 11://printf("\nEV5 Slots:3");
			 break;
			case 12:printf("\nDM1 Slots:1 clock: %d", count);
				DM1(size, count);
				break;
			case 13://printf("\nDH3 Slots:3");
			break;
			case 14://printf("\nHV3/EV3 Slots:1"); 
				break;
			case 15://printf("\nDH5 Slots:5");
				//DH5(size, count);
				break;
		}
	}

	//printf("\nEnd Header\n\n");
}

int bluetooth_sniffer::DM1(int size, int clock)
{
	char *stream = d_stream + d_consumed + 126;
	int count, length, bitlength;
	uint16_t crc, check;
	uint8_t header[8];

	if(8 >= size)
		return 1;
	//unfec23(stream, 16);

	unwhiten_char(stream, header, clock, 8, 18);

	printf("\npayload header: ");
	for(count = 0; count < 8; count++)
	{
		printf("%d", header[count]);
	}
	printf("\n");

	crc = header[0] | header[1] << 1;
	switch (crc) {
		case 1: printf("Continuation of fragment\n");break;
		case 2: printf("Start of fragment\n");break;
	}

	length = payload_header(header);
	printf("length = %d\n", length);

	if((length+3)*12 >= size)
		return 1;

	unfec23(stream, (length+3)*8);
	uint8_t payload[(length+3)*8];
	unwhiten_char(stream, payload, clock, (length+3)*8, 18);
	int x = 0;
	for(count = 0; count < (length+3)*8; count++)
	{
		if(count == ((length+3)*8)-16) {
			printf("\nPacket CRC:");
			x = 0;}
		x <<= 1;
		x |= payload[count];
		printf("%d", payload[count]);
	}
	printf("\n");
	crc = crcgen(payload, (length+1)*8, d_UAP);
	if(crc == x)
		printf("CRC verified\n");
	else
		printf("CRC incorrect\n");
}


int bluetooth_sniffer::DM5(int size, int clock)
{
	char *stream = d_stream + d_consumed + 126;
	int count, length, bitlength;
	uint16_t crc, check;
	uint8_t header[16];

	if(16 >= size)
		return 1;
	unfec23(stream, 16);
	printf("\nwhitened payload header: ");
	for(count = 0; count < 16; count++)
	{
		printf("%d", stream[count]);
	}
	printf("\n");
	unwhiten_char(stream, header, clock, 16, 18);

	printf("\npayload header: ");
	for(count = 0; count < 16; count++)
	{
		printf("%d", header[count]);
	}
	printf("\n");

	crc = header[0] | header[1] << 1;
	printf("\nLLID -> %d", crc);

	length = long_payload_header(header);
	printf("\nclock = %d  length = %d\n", clock, length);

	if((length+4)*8 >= size)
		return 1;

	unfec23(stream, length*8);
}
