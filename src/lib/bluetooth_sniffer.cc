/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "bluetooth_sniffer.h"
#include "bluetooth_packet.h"

/*
 * Create a new instance of bluetooth_sniffer and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
bluetooth_sniffer_sptr 
bluetooth_make_sniffer (int lap, int uap)
{
  return bluetooth_sniffer_sptr (new bluetooth_sniffer (lap, uap));
}

//private constructor
bluetooth_sniffer::bluetooth_sniffer (int lap, int uap)
  : bluetooth_block ()
{
	d_LAP = lap;
	d_UAP = uap;
	d_consumed = 0;
	printf("Bluetooth packet sniffer\n\n");

	/* ensure that we are always given at least 3125 symbols (5 time slots) */
	set_history(3125);
}

//virtual destructor.
bluetooth_sniffer::~bluetooth_sniffer ()
{
}

int 
bluetooth_sniffer::work (int noutput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items)
{
	d_stream = (char *) input_items[0];
	int retval;

	retval = bluetooth_packet::sniff_ac(d_stream, noutput_items);
	if(-1 == retval) {
		d_consumed = noutput_items;
	} else {
		d_consumed = retval;
		bluetooth_packet_sptr packet = bluetooth_make_packet(&d_stream[retval], 3125 + noutput_items - retval);
		if(packet->get_LAP() == d_LAP) {
			packet->set_UAP(d_UAP);
			packet->decode_header();
			packet->print();
		}
		d_consumed += 126;
	}

  // Tell runtime system how many output items we produced.
	return d_consumed;
}
