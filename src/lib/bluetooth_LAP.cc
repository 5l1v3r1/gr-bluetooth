/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <bluetooth_LAP.h>
#include <sys/time.h>

/*
 * Create a new instance of bluetooth_LAP and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
bluetooth_LAP_sptr
bluetooth_make_LAP (int x)
{
  return bluetooth_LAP_sptr (new bluetooth_LAP (x));
}

//private constructor
bluetooth_LAP::bluetooth_LAP (int x)
  : bluetooth_block ()
{
	d_LAP = 0;
	d_stream_length = 0;
	d_consumed = 0;
	d_x = x;
	d_cumulative_count = 0;
	// ensure that we are always given at least 72 symbols
	set_history(72);
}

//virtual destructor.
bluetooth_LAP::~bluetooth_LAP ()
{
}

int 
bluetooth_LAP::work (int noutput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items)
{
	d_stream = (char *) input_items[0];
	// actual number of samples available to us is noutput_items + 72 (history)
	d_stream_length = noutput_items;
	int retval;

	retval = sniff_ac();
	d_consumed = (-1 == retval) ? noutput_items : retval + 72;
	d_cumulative_count += d_consumed;

    // Tell runtime system how many output items we produced.
	return d_consumed;
}

/* Create an AC and check it*/
int bluetooth_LAP::check_ac(char *stream)
{
	int count, LAP, aclength;
	uint8_t *ac, *grdata;
	aclength = 72;

	/* Get LAP */
	LAP = stream[38] | stream[39] << 1 | stream[40] << 2 | stream[41] << 3 | stream[42] << 4 | stream[43] << 5 | stream[44] << 6 | stream[45] << 7 | stream[46] << 8 | stream[47] << 9 | stream[48] << 10 | stream[49] << 11 | stream[50] << 12 | stream[51] << 13 | stream[52] << 14 | stream[53] << 15 | stream[54] << 16 | stream[55] << 17 | stream[56] << 18 | stream[57] << 19 | stream[58] << 20 | stream[59] << 21 | stream[60] << 22 | stream[61] << 23;

	/* Generate AC */
	ac = acgen(LAP);

	/* Check AC */
	/* Convert it to grformat, 1 bit per byte, in the LSB */
	grdata = (uint8_t *) malloc(aclength);

	for(count = 0; count < 9; count++)
		convert_to_grformat(ac[count], &grdata[count*8]);
	free(ac);

	for(count = 0; count < aclength; count++)
	{
		if(grdata[count] != stream[count])
		{
			free(grdata);
			return 0;
		}
	}

	free(grdata);
	return LAP;
}

/* Looks for an AC in the stream */
int bluetooth_LAP::sniff_ac()
{
	int LAP, jump, count, counter;
	char *stream;
	int jumps[16] = {3,2,1,3,3,0,2,3,3,2,0,3,3,1,2,3};

	for(count = 0; count < d_stream_length; count += jump)
	{
		stream = &d_stream[count];
		jump = jumps[stream[0] << 3 | stream[1] << 2 | stream[2] << 1 | stream[3]];
		if(0 == jump)
		{
			/* Found the start, now check the end... */
			counter = stream[61] << 10 | stream[62] << 9 | stream[63] << 8 | stream[64] << 7 | stream[65] << 6 | stream[66] << 5 | stream[67] << 4 | stream[68] << 3 | stream[69] << 2 | stream[70] << 1 | stream[71];

			if((stream[4] == stream[0]) && ((0x0d5 == counter) || (0x72a == counter)))
			{
				if((LAP = check_ac(stream)))
				{
					timeval tim;
					gettimeofday(&tim, NULL);
					//double timenow = tim.tv_usec;
					printf("GOT PACKET on %d , LAP = %06x at sample %d, wall time: %d.%06d\n", d_x, LAP, d_cumulative_count + count, tim.tv_sec, tim.tv_usec);
					return count;
				}
			}
			jump = 1;
		}
	}
	return -1;
}
